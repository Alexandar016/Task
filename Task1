#include<stdio.h>
#include<stdlib.h>
#include"mpi.h"

int main(int argc, char* argv[])
{
    int p;
    int my_rank;
    int n;
    int m;
    int x;
    int y;
    int i;
    double sum=0.0;

    void Read_matrix(char* prompt, double local_A[], int n, int m_bar, int p, int my_rank);

    MPI_Init(&argc, &argv);
    MPI_Comm_size(MPI_COMM_WORLD, &p);
    MPI_Comm_rank(MPI_COMM_WORLD, &my_rank);

    if(my_rank==0)
    {
        printf("Enter the values of m and n\n:");
        scanf("%d, %d",&m,&n);
    }
    MPI_Bcast(&n, 1, MPI_INT,0,MPI_COMM_WORLD);
    MPI_Bcast(&m, 1, MPI_INT,0,MPI_COMM_WORLD);

    matrix_A = malloc(n*m*sizeof(double));
    Read_matrix("The Matrix A", matrix_A, n, m,p,my_rank);
    MPI_Barrier(MPI_COMM_WORLD);

    if (my_rank==0)
    {
        printf("Please provide the input x and y\n:");
        scanf("%d, %d",&x,&y);
        for (i=x;i<=y;i++)
        {
            MPI_Reduce(&matrix_A,&sum,1,MPI_DOUBLE,MPI_SUM,0,i);
        }
        printf("%f",sum);
    }
}

void Read_matrix(char* prompt, double local_A[], int m, int local_n, int p, int my_rank)
{
    int i,j,q;
    double* temp;
    MPI_Status status;
    temp = malloc(m*local_n*sizeof(double));

    if(my_rank==0)
    {
        for(i=0;i<m_bar;i++)
        {
            for(j=0;j<n;j++)
            {
                scanf("%f",&local_A[i*n+j]);
            }
        }
        for(q =1;q<p;q++)
        {
            for(i =0;i<m_bar;i++)
            {
                for(j=0;j<n;j++)
                {
                    scanf("%f",&temp[i*n+j]);
                }
            }
            MPI_Send(temp,m_bar*n,MPI_FLOAT,q,0,MPI_COMM_WORLD);
        }
    }
	else
	{
        MPI_Recv(local_A,m_bar*n,MPI_FLOAT,0,0,MPI_COMM_WORLD,&status);
	}
	free(temp);
}
