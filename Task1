/* By: Aleksandar Mitic */

#include <chrono>
#include <cstring>
#include <cstdio>
#include <future>
#include <iostream>
#include "mpi.h"
#include <string>
#include <sstream>
#include <stdlib.h>
#include <regex>

using namespace std;

int main(int argc, char *argv[])
{
    int p;
    int my_rank;
    /* int rank_low; */
    /* int rank_up;  */
    int n;
    int m;
    int x;
    int y;
    int i;
    int j;
    int q;
    int row;
    string usr_input;
    double sum=0.0;
    double local_sum=0.0;
    double final_sum=0.0;
    double* matrix_A;
    MPI_Status status;
    //MPI_Request request, request2;
    MPI_Request request = MPI_REQUEST_NULL;

    void Read_matrix(char* prompt, double local_A[], int n, int m, int p, int my_rank);
    double Serial_sum(double x[], int n, int m);

    MPI_Init(&argc, &argv);
    MPI_Comm_size(MPI_COMM_WORLD, &p);
    MPI_Comm_rank(MPI_COMM_WORLD, &my_rank);
    if(my_rank==0)
    {
        scanf("%d",&n);
        scanf("%d",&m);
    }
    MPI_Bcast(&n, 1, MPI_INT,0,MPI_COMM_WORLD);
    MPI_Bcast(&m, 1, MPI_INT,0,MPI_COMM_WORLD);
    MPI_Barrier(MPI_COMM_WORLD);

    matrix_A = malloc(n*m*sizeof(double));
    Read_matrix("The Matrix A", matrix_A, n, m,p,my_rank);
    //while(true)
    //{
        if (my_rank==0)
        {
            getline (cin, usr_input);
            if (usr_input=="quit")
            {
                MPI_Abort(MPI_COMM_WORLD, 1);
                //break;
            }
            else
            {
                /* using regular expression to take integers from interval */
                sscanf( usr_input.c_str(), "%*[^\[]\[%d",&x );
                sscanf( usr_input.c_str(), "%*[^,],%d",&y );
                
                /* rank_low=x/n; */
                /* rank_up=y/n;  */
                for(i=1;i<p;i++)
                {
                    MPI_ISend(&x,1,MPI_INT,i,0,MPI_COMM_WORLD,&request);
                    MPI_ISend(&y,1,MPI_INT,i,1,MPI_COMM_WORLD,&request);
                }
            }
        }
        else
        {
            MPI_IRecv(&x,1,MPI_INT,0,0,MPI_COMM_WORLD,&request);
            MPI_IRecv(&y,1,MPI_INT,0,1,MPI_COMM_WORLD,&request);
        }
        MPI_Wait(&request, &status);
        //MPI_Wait(&request2, &status);
        
        /* if (rank_low<=my_rank<=rank_up) */
        if (my_rank!=0)
        {
            sum=0.0;
            for (j=x;j<=y;j++)
            {
                if(j-n*my_rank>=0)
                {
                    row=j%n;
                    sum=sum+Serial_sum(matrix_A,row,m);
                }
            }
            MPI_ISend(&sum, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD,&request);
        }
        else
        {
            final_sum=0.0;
            for(i=x;i<=y;i++)
            {
                if (n-i-1>=0)
                {
                    final_sum=final_sum+Serial_sum(matrix_A, i, m);
                }
            }
            for(q=1;q<p;q++)
            {
                MPI_IRecv(sum, 1, MPI_DOUBLE, q, 0, MPI_COMM_WORLD, &request);
                final_sum=final_sum+sum;
            }
            cout<<"Sum is: "<<final_sum<<endl;
        }
    //}
    MPI_Wait(&request, &status);
    free(matrix_A);
    MPI_Barrier(MPI_COMM_WORLD);
    MPI_Finalize();
}
void Read_matrix(char* prompt, double local_A[], int n, int m, int p, int my_rank)
{
    int i,j,q;
    double* temp;
    MPI_Status status;
    temp = malloc(m*n*sizeof(double));

    if(my_rank==0)
    {
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                scanf("%f",&local_A[i*m+j]);
            }
        }
        for(q =1;q<p;q++)
        {
            for(i =0;i<n;i++)
            {
                for(j=0;j<m;j++)
                {
                    scanf("%f",&temp[i*m+j]);
                }
            }
            MPI_Send(temp,m*n,MPI_DOUBLE,q,0,MPI_COMM_WORLD);
        }
    }
    else
    {
        MPI_Recv(local_A,m*n,MPI_DOUBLE,0,0,MPI_COMM_WORLD,&status);
    }
    free(temp);
}
double Serial_sum(double x[], int n, int m)
{
    int i;
    double sum = 0.0;

    for (i = n*m; i < (n+1)*m; i++)
        sum = sum + x[i];
    return sum;
}
